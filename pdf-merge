#!/usr/bin/env python3

# Original author Nicholas Kim, modified by Yan Pashkovsky
# New license - GPL v3

import os
import sys
import time

from PyPDF2 import utils, PdfFileReader, PdfFileWriter


def get_cmdline_arguments():
    """Retrieve command line arguments."""

    from optparse import OptionParser

    usage_string = "%prog [-o output_name] file1, file2 [, ...]"

    parser = OptionParser(usage_string)
    parser.add_option(
        "-o", "--output",
        dest="output_filename",
        default=time.strftime("output_%Y%m%d_%H%M%S"),
        help="Specify output filename (exclude .pdf extension);"
             "default is current date/time stamp"
    )

    options, args = parser.parse_args()
    if len(args) < 2:
        parser.print_help()
        sys.exit(1)
    return options, args


def main():
    options, filenames = get_cmdline_arguments()
    output_pdf_name = options.output_filename
    files_to_merge = {}

    # get PDF files
    for fname in filenames:
        try:
            pdf_file = PdfFileReader(open(fname, "rb"))
        except(utils.PdfReadError):
            print("%s is not a valid PDF file." % fname, file=sys.stderr)
            sys.exit(1)
        except(IOError):
            print("%s could not be found." % fname, file=sys.stderr)
            sys.exit(1)
        else:
            files_to_merge[fname] = pdf_file

    # merge page by page
    output = PdfFileWriter()
    output_page_num = 0

    for fname, fobj in files_to_merge.items():

        for i in range(fobj.numPages):
            output.addPage(fobj.getPage(i))

        path, name = os.path.split(str(fname))
        _, folder = os.path.split(path)

        # TODO: 3rd argument (parent) to this function will allow
        # nested bookmarks

        output.addBookmark(folder + "/" + name[:-4], output_page_num)

        output_page_num += fobj.numPages

    # Write stream to file
    with open(output_pdf_name, "wb") as op:
        output.write(op)

    print("%s successfully created." % output_pdf_name)


if __name__ == "__main__":
    main()
