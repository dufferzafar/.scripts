#!/usr/bin/env python3

"""
Usage: pdf-merge [options] <file>...

Options:
    -o <output>, --output <output>

Example:

    pdf-merge *.pdf
    pdf-merge -o merged.pdf *.pdf
"""

# Original author Nicholas Kim, modified by Yan Pashkovsky
# Further modified by Shadab Zafar
# New license - GPL v3

import os
import sys
import time

import docopt

from PyPDF2 import utils, PdfFileReader, PdfFileWriter


def main(args):

    # Get PDF files
    files_to_merge = {}
    for fname in args['<file>']:
        try:
            pdf_file = PdfFileReader(open(fname, "rb"))
        except(utils.PdfReadError):
            print("'%s' is not a valid PDF file." % fname, file=sys.stderr)
            sys.exit(1)
        except(IOError):
            print("'%s' could not be found." % fname, file=sys.stderr)
            sys.exit(1)
        else:
            files_to_merge[fname] = pdf_file

    # Merge page by page
    output_stream = PdfFileWriter()
    output_page_num = 0

    for fname, fobj in files_to_merge.items():

        for i in range(fobj.numPages):
            output_stream.addPage(fobj.getPage(i))

        path, name = os.path.split(str(fname))
        _, folder = os.path.split(path)

        # TODO: 3rd argument (parent) to this function will allow
        # nested bookmarks

        output_stream.addBookmark(folder + "/" + name[:-4], output_page_num)

        output_page_num += fobj.numPages

    # Output file name: either provided or random
    if args['--output']:
        output_pdf = args['--output']
    else:
        output_pdf = time.strftime("Merged_%Y-%m-%d_%H-%M-%S.pdf")

    # Write stream to file
    with open(output_pdf, "wb") as op:
        output_stream.write(op)

    print("Successfully created: ", output_pdf)


if __name__ == "__main__":

    args = docopt.docopt(__doc__)

    main(args)
