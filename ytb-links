#!/usr/bin/env python3

"""Get Video links from a URL.

The output is in a format that can be fed into youtube-dl via the -a switch.

Usage:
    ytb-links <url>
    ytb-links <url> -f <file>

Examples:
    ytb-links [-S] <url> [-f=<file>]

    ytb-links https://www.youtube.com/playlist?list=PL8B24C31197EC371C

    ytb-links https://www.youtube.com/playlist?list=PL8B24C31197EC371C > playlist

    You can then manually edit the playlist file and comment videos that you
    don't want to download. After you're done just pass the list to youtube-dl

    youtube-dl -a playlist
"""

import re

import docopt
import pyquery

HEADER = """
# {title}
# {url}"""

VIDEO = """
# {time} - {title}
https://youtube.com{url}"""


def pq_from_file_or_url(url, file):
    if file is not None:
        with open(file) as inp:
            html = inp.read()

        pq = pyquery.PyQuery(html)
    else:
        pq = pyquery.PyQuery(url=url)

    return pq


def pq_from_url_selenium(url):
    from selenium import webdriver
    drv = webdriver.PhantomJS()
    drv.set_window_size(1336, 768)

    drv.get(url)

    # Needs Wait?
    html = drv.page_source
    pq = pyquery.PyQuery(html)

    drv.quit()

    return pq


def from_ytb_playlist(url, file=None):
    pq = pq_from_file_or_url(url, file)

    title = pq('h1.pl-header-title')
    links = pq('td.pl-video-title > a')
    times = pq('td.pl-video-time span')

    print(HEADER.format(title=title.text(), url=url))
    print('#' * (len(url) + 2))

    for link, time in zip(links, times):
        url = re.sub(r'&list=[\w-]+', '', link.get('href'))
        print(VIDEO.format(time=time.text, title=link.text.strip(), url=url))


# TODO: Extract file support to a common place, and add in this function too
# BUG: This doesn't catch all the
def from_generic_page(url, file=None, selenium=False):
    if selenium:
        pq = pq_from_url_selenium(url)
    else:
        pq = pq_from_file_or_url(url, file)

    print(HEADER.format(title=pq('title').text(), url=url))
    print('#' * (len(url) + 2))
    print()

    for link in pq('iframe'):
        href = link.get('src')

        if href and ("youtube.com/" in href or "youtu.be/" in href):
            print(href)


if __name__ == '__main__':
    args = docopt.docopt(__doc__)
    url = args['<url>']
    file = args.get('<file>')

    if url and "youtube.com/playlist" in url:
        from_ytb_playlist(url, file=file)
    elif url:
        # if args['-S']:
        #     from_generic_page(url, selenium=True)
        # else:
            from_generic_page(url, file=file)
